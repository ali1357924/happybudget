@import "./ag_theme";
@import "./cells";
@import "./menus";

.cell-dropdown {
  background-color: transparent;
  border: none !important;
  border-radius: 0px;
  padding-top: 4px;

  .model-tags-menu {
    border: 1px solid #efefef;
  }
}

@mixin grid_borders($color) {
  .grid {
    .ag-header {
      background-color: $color !important;
    }

    .row {
      > .cell {
        border-bottom: 1px solid $color;
        border-left: 1px solid $color;
      }
    }
  }
}

@mixin grid_row_height($height) {
  .row {
    > .cell {
      line-height: $height;

      &.ag-cell-inline-editing {
        height: $height;
      }
    }
  }
}

@mixin grid_background($color) {
  // Fixes problem with range selection and hover causing white "blocks" in table.
  .ag-root
    .ag-body-viewport:not(.ag-has-focus)
    .row:not(.row--group)
    .ag-cell-range-selected-1:not(.ag-cell-inline-editing) {
    background-color: $color !important;
  }

  .row:not(.ag-row-hover, .row--group) {
    > .cell:not(.cell--calculated) {
      background-color: $color;

      &.ag-cell-range-selected {
        background-color: $color;
      }
    }
  }
}

@mixin footer_grid_background($color) {
  @include grid_background($color);

  .row {
    > .cell {
      // Here, we use the !important flag because the rows should not change color on hover.
      background-color: $color !important;

      &.ag-cell-range-selected {
        background-color: $color !important;
      }
    }
  }
}

.ag-react-container {
  width: 100%;
}

.table {
  @include grid_borders($table-border-color);

  display: flex;
  flex-direction: column;
  height: 100%;
  max-height: 100%;
  // Required for absolute positioning of notifications.
  position: relative;

  .ag-header {
    border: none;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;

    .ag-header-row {
      > .ag-header-cell {
        font-family: $roboto;
        font-size: $medium-body-font-size;
        font-weight: 400;
        letter-spacing: 0.045em;
        padding-left: 10px;
        padding-right: 10px;

        .inner-cell--header {
          display: flex;
          width: 100%;

          .icon--table-header {
            color: $grid-icon-color;
            margin-right: 8px;
          }

          .text {
            flex-grow: 100;
            font-weight: 400;
            line-height: 36px;
          }
        }
      }
    }

    .ag-pinned-left-header {
      border-right: none !important;
    }
  }

  .grid {
    @include grid_row_height(36px);

    position: relative;

    .ag-pinned-left-cols-container {
      z-index: 1;
    }

    .row {
      border: none !important;
      color: #3a3a3a;

      &:first-child {
        .ag-cell:not(.ag-cell-focus) {
          border-top: none !important;
        }
      }

      > .cell {
        // Because we have a 2px border width when the cell is selected and a 1px border
        // width when it is not selected, if we do not apply this flex centering the text
        // shifts on selection.
        @include vertical-flex-c;

        font-family: $roboto;
        font-size: $standard-body-font-size;
        -webkit-font-smoothing: subpixel-antialiased;
        font-weight: 400;
        overflow: hidden;
        overflow-x: hidden;
        padding-left: 6px;
        padding-right: 6px;
        text-overflow: ellipsis;
        // This is needed so that we can display white space in our cells without
        // AG Grid trimming them.  Note that this sometimes causes issues with cell
        // text overflow.  We still need to figure out a mores sustainable solution.
        white-space: pre;

        .inner-cell {
          @include vertical-flex-c;

          height: 100%;
          width: 100%;

          .icon-wrapper {
            height: 100%;
          }

          .info-wrapper {
            @include vertical-flex-c;

            height: 100%;
            left: 0;
            padding: 4px;
            position: absolute;
            top: 0;

            .btn--cell-info,
            .icon--cell-info {
              display: none;
            }

            .btn--cell-info {
              height: 15px;
              width: 15px;

              .icon {
                height: 14px;
                width: auto;
              }
            }

            .icon--cell-info {
              height: 14px;
              width: auto;
            }
          }

          &:hover,
          &:focus {
            .btn--cell-info,
            .icon--cell-info {
              display: flex;
            }
          }
        }

        &--action {
          // white-space break-spaces messes with the checkbox selection cells.
          white-space: nowrap !important;
        }

        // In the case that the cell renders HTML (like a tag) it is much easier
        // to vertically center the content with flex than it is to pad each cell
        // to center the rendered HTML.  It is important that we do not apply this
        // flex to cells that just render text, because they will already be vertically
        // centered and it messes with the cell's ability to truncate text.
        &--renders-html {
          @include vertical-flex-c;
        }

        // Used currently just for the AttachmentsCell, where we want the upload
        // indicators to highlight the entire cell just up to it's borders, and
        // the padding to be applied inside of that highlighting/dashed border.
        &--full-size {
          padding: 0px !important;

          .ag-react-container {
            height: 100%;

            .inner-cell {
              padding-left: 6px;
              padding-right: 6px;
            }
          }
        }

        &.ag-cell-inline-editing {
          border-radius: 0px !important;

          .ag-input-field-input,
          .ag-text-field-input {
            background-color: transparent !important;
            border: none !important;
            box-shadow: none !important;
            padding: 0px !important;
          }
        }

        // This will vertically center the text nicely while also not adjusting the
        // vertical location of the text when the cell is selected.
        .ag-react-container {
          @include vertical-flex-c;
        }

        .ag-selection-checkbox {
          height: 16px;
          margin-right: 0px;
        }

        &.ag-cell-focus {
          border: 2px solid $green !important;

          &.cell--not-selectable {
            border: unset !important;

            .ag-fill-handle {
              display: none !important;
            }
          }
        }

        .ag-fill-handle {
          background-color: $green;
        }
      }
    }
  }

  .grid--footer {
    .ag-header {
      height: 0px !important;
      min-height: 0px !important;
    }
  }

  .core-table {
    display: flex;
    flex-direction: column;
    height: 100%;
    max-height: 100%;

    &.with-page-footer {
      max-height: calc(100% - 40px);
    }

    .ag-popup-editor {
      margin-top: 36px;
    }

    .grid--data {
      @include grid_background($white);

      max-height: calc(100% - 40px);

      .ag-root-wrapper {
        max-height: 100% !important;
        overflow: visible;

        .ag-root-wrapper-body {
          max-height: 100% !important;
          overflow-y: hidden;

          .ag-body-viewport {
            overflow-y: scroll !important;
          }
        }
      }

      .ag-row:last-child {
        border-bottom: none !important;
      }

      .ag-center-cols-container {
        .row--group {
          > .cell {
            // We have to make sure to do this only inside of .ag-center-colors-container
            // because we need to not apply this to the .ag-cell-range-right of
            // the pinned columns container on the left.
            &:last-child {
              border-bottom-right-radius: 8px;
              border-top-right-radius: 8px;
            }
          }
        }
      }

      .row {
        > .cell {
          .icon-wrapper {
            float: right;
            margin-right: 6px;
            width: 16px;

            .icon {
              @include size(16px);
            }
          }

          &--drag {
            .inner-cell {
              .icon {
                &:hover {
                  cursor: pointer;
                }
              }
            }
          }

          &--action {
            border: unset !important;
            padding: 2px;
            text-align: center;

            > * {
              margin: 0 auto;
            }
          }

          &--calculated {
            background-color: #f7fffa;

            .ag-fill-handle {
              display: none !important;
            }

            &:not(.ag-cell-range-top) {
              border-top-color: transparent;
            }

            &:not(.ag-cell-range-right) {
              border-right-color: transparent;
            }

            &:not(.ag-cell-range-left) {
              border-left-color: transparent;
            }

            &:not(.ag-cell-range-bottom) {
              border-bottom-color: transparent;
            }

            &.negative {
              color: $red !important;
            }
          }
        }

        &.ag-row-hover {
          background-color: $gray-highlight;

          > .cell {
            background-color: $gray-highlight;

            &.cell--calculated {
              background-color: $gray-highlight;
            }
          }
        }

        &--group {
          border-bottom: none !important;
          // Since the entire row is colored (instead of coloring the individual
          // cells) we have to apply the radius to the entire row AND the first/
          // last cells.  If the radius isn't applied to the row, the underlying
          // curved radii of the first and last cells will not be seen.
          border-radius: 10px !important;

          > .cell {
            background-color: inherit !important;
            border: none !important;
            font-weight: 400 !important;

            // Note: We cannot simply do &:first-child because the first child
            // will be different between the pinned cols container and the
            // center cols container.
            &[aria-colindex="1"] {
              border-bottom-left-radius: 8px;
              border-top-left-radius: 8px;
            }

            &.ag-cell-last-left-pinned {
              border-right: 0px;
              overflow: visible;
            }

            .btn--icon-only {
              &.ag-grid-action-button {
                &:hover {
                  background-color: transparent;
                }
              }
            }
          }
        }
      }
    }

    &.with-table-menu {
      .grid--data {
        max-height: calc(100% - 40px - 40px);
      }
    }

    .grid--table-footer {
      @include footer_grid_background($table-border-color);

      flex: none;
      height: 40px;

      .ag-body-viewport {
        border-bottom-left-radius: 8px;
        border-bottom-right-radius: 8px;
      }

      &.constrain-horizontally {
        .ag-center-cols-viewport {
          max-width: 100%;
          overflow-x: hidden;

          .ag-center-cols-container {
            max-width: 100%;
          }
        }
      }

      .row {
        border-bottom: none !important;

        > .cell {
          border: none !important;

          &[aria-colindex="1"] {
            border-bottom-left-radius: 8px;
          }

          &.ag-cell-range-right {
            border-bottom-right-radius: 8px;
          }
        }
      }
    }
  }

  .page-footer-grid-wrapper {
    display: flex;
    flex-direction: column;
    flex-grow: 100;
    min-height: 40px;

    .grid--page-footer {
      @include footer_grid_background(#d3d3d3);

      flex: none;
      height: 30px;
      margin-top: 10px;

      .ag-body-viewport {
        border-radius: 8px;
      }

      &.constrain-horizontally {
        .ag-center-cols-viewport {
          max-width: 100%;
          overflow-x: hidden;

          .ag-center-cols-container {
            max-width: 100%;
          }
        }
      }

      .row {
        border-bottom: none !important;

        > .cell {
          border: none !important;
          line-height: 28px;

          &[aria-colindex="1"] {
            border-bottom-left-radius: 8px;
            border-top-left-radius: 8px;
          }

          &.ag-cell-range-right {
            border-bottom-right-radius: 8px;
            border-top-right-radius: 8px;
          }
        }
      }
    }
  }

  &--minimal {
    @include grid_borders($transparent);

    font-family: $avenir !important;

    .ag-header {
      border: none;
      border-top-left-radius: 8px;
      border-top-right-radius: 8px;

      .ag-header-row {
        > .ag-header-cell {
          background-color: $white;
        }
      }
    }

    .core-table {
      .grid--data {
        @include grid_row_height(40px);
        @include grid_background($white);

        .row {
          > .cell {
            font-family: $avenir;

            .link--table {
              font-family: $avenir;
              text-align: inherit !important;
            }
          }
        }
      }

      .grid--table-footer {
        @include footer_grid_background($white);

        .row {
          > .cell {
            font-family: $avenir;
          }
        }
      }
    }
  }
}
