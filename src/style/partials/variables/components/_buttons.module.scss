@use "sass:string";
@use "sass:list";
@use "sass:map";
@use "sass:meta";

@use "../../functions" as fn;
@use "../../mixins" as mixins;

@use "../colors.module" as colors;
@use "./icons.module" as icons;
@use "./typography.module" as typography;
@use "./input.module" as input;

/* ----------------------------------------- Variants ------------------------------------------ */
$button-variant-map: (
  "solid": (
    "danger",
    "primary",
    "secondary",
    "bare",
    "white",
  ),
  "alternate": (
    "danger",
    "link",
  ),
  "action": (
    "bare",
    "primary",
    "secondary",
  ),
);

$button-primary-variants: map.keys($button-variant-map);
$button-default-primary-variant: "solid";
$button-default-sub-variants: (
  "solid": "primary",
  "alternate": "link",
  "action": "bare",
);

/* ----------------------------------------- Properties ----------------------------------------- */
$button-locked-class: ".button--locked";
$button-loading-class: ".button--loading";

/*
Buttons and Anchors need to leverage an "outline" instead of a border, because an "outline" is inset
and a border is outset.  In other words, the border will contribute size to the overall Button or
Anchor, while the outline will not.
*/
$button-outline-width: 1px;
$button-border-radius: 6px;
$button-font-family: typography.$font-family-avenir;
$button-default-font-size: typography.get-font-size("body", 1);

/*
When an Icon and/or Spinner are in the Button (or Anchor), the size of the Icon or Spinner needs
to be just a hair smaller than the line-height of the accompanying text (per designers).  To do
this, the height of the element inside of the Button (or Anchor) that wraps the Icon or Spinner
needs to still consume 100% of the available height (i.e. size = "fill"), but needs to have inner
padding to shrink the size of the Icon or Spinner it contains.
*/
$button-icon-padding: 2px;

$button-font-weight: typography.get-font-weight("body", "regular");

/*
Note: The mapped values are not applicable for the Alternate Variant - just the buttons/anchors that
have borders and/or backgrounds with text (Primary, Secondary and Bare Variants).
*/
$button-solid-padding: (
  "small": 8px 16px,
  "medium": 10px 20px,
  "large": 14px 30px,
);

/*
Usually, the height of the button would just be determined by the combination of the vertical
padding and line-height (i.e. height = 2 * vertical-padding + line-height).  However, we need
to constrain the height (and not allow it to be "auto") such that the SVG icons or spinners can
properly fill up the available height and size responsively.  If we did not define the height
explicitly, it would not be constrained and this would not work.

So instead of calculating the height based on the padding and line-height, we define the heights
and the padding and then calculate the line-height based on the padding and height - and all 3
consistent with each other while still allowing the height to be constrained.
*/
$button-solid-sizes: (
  "small": 32px,
  "medium": 40px,
  "large": 48px,
);

$button-alternate-sizes: (
  "small": 14px,
  "medium": 16px,
  "large": 18px,
);

/*
The button action sizes are designed such that the icon sizes, which are already defined for icons,
stay consistent between the bare and the primary variant for a given size string.  For instance,
a medium sized primary action button should have a medium sized icon, and a medium sized bare
action button should have a medium sized icon, even if the sizes of the buttons themselves differ.

The difference between the bare and primary variants are that a primary variant has a border, which
means that it has to have a larger padding than the bare variant, such that the border does not get
very very close to the edges of the icon.  This means that a medium sized bare action button will
be smaller than a medium sized primary action button.
*/
$button-action-bare-padding: 2px;
$button-action-primary-padding: 6px;
$button-action-secondary-padding: 6px;

$button-action-bare-sizes: (
  "small": fn.map-get(icons.$icon-sizes, "small") + 2 * $button-action-bare-padding,
  "medium": fn.map-get(icons.$icon-sizes, "medium") + 2 * $button-action-bare-padding,
  "large": fn.map-get(icons.$icon-sizes, "large") + 2 * $button-action-bare-padding,
);

$button-action-primary-sizes: (
  "small": fn.map-get(icons.$icon-sizes, "small") + 2 * $button-action-primary-padding,
  "medium": fn.map-get(icons.$icon-sizes, "medium") + 2 * $button-action-primary-padding,
  "large": fn.map-get(icons.$icon-sizes, "large") + 2 * $button-action-primary-padding,
);

$button-action-secondary-sizes: (
  "small": fn.map-get(icons.$icon-sizes, "small") + 2 * $button-action-secondary-padding,
  "medium": fn.map-get(icons.$icon-sizes, "medium") + 2 * $button-action-secondary-padding,
  "large": fn.map-get(icons.$icon-sizes, "large") + 2 * $button-action-secondary-padding,
);

$button-solid-font-sizes: (
  "small": typography.get-font-size("body", 2),
  "medium": typography.get-font-size("body", 1),
  "large": typography.get-font-size("body", 1),
);

$button-alternate-font-sizes: (
  "small": typography.get-font-size("body", 2),
  "medium": 15px,
  "large": typography.get-font-size("body", 1),
);

@mixin button-hovered {
  @include mixins.hovered {
    @include mixins.without-selectors(($button-loading-class, $button-locked-class)) {
      @content;
    }
  }
}

@mixin button-focused {
  @include mixins.focused {
    @include mixins.without-selectors(($button-loading-class, $button-locked-class)) {
      @content;
    }
  }
}

$button-variant-colors: (
  "solid": (
    "primary": (
      color: colors.$white,
      background-color: colors.$green,
      outline-color: colors.$green,
      "hovered": (
        background-color: colors.$dark-green,
        outline-color: colors.$dark-green,
        outline: $button-outline-width solid colors.$dark-green,
      ),
      "focused": (
        background-color: colors.$dark-green,
        outline-color: colors.$dark-green,
        outline: $button-outline-width solid colors.$dark-green,
      ),
      // We may want to treat disabled states for different variant colors differently in the
      // future, but for now they are mostly the same.
      "disabled":
        (
          color: colors.$standard-disabled-color,
          outline-color: colors.$standard-disabled-border-olor,
          outline: $button-outline-width solid colors.$standard-disabled-border-color,
          background-color: colors.$standard-disabled-bg-color,
        ),
    ),
    "secondary": (
      color: colors.$text-primary,
      background-color: colors.$light-grey,
      outline-color: colors.$light-grey,
      "hovered": (
        background-color: colors.$darker-light-grey,
        outline-color: colors.$darker-light-grey,
        outline: $button-outline-width solid colors.$darker-light-grey,
      ),
      "focused": (
        background-color: colors.$darker-light-grey,
        outline-color: colors.$darker-light-grey,
        outline: $button-outline-width solid colors.$darker-light-grey,
      ),
      // We may want to treat disabled states for different variant colors differently in the
      // future, but for now they are mostly the same.
      "disabled":
        (
          color: colors.$standard-disabled-color,
          outline-color: colors.$standard-disabled-border-olor,
          outline: $button-outline-width solid colors.$standard-disabled-border-color,
          background-color: colors.$standard-disabled-bg-color,
        ),
    ),
    "bare": (
      color: colors.$link-blue,
      background-color: colors.$transparent,
      outline-color: colors.$transparent,
      "hovered": (
        color: colors.$dark-blue,
      ),
      "focused": (
        color: colors.$dark-blue,
      ),
      // We may want to treat disabled states for different variant colors differently in the
      // future, but for now they are mostly the same.
      "disabled":
        (
          color: colors.$standard-disabled-color,
        ),
    ),
    "danger": (
      color: colors.$white,
      background-color: colors.$red,
      outline-color: colors.$red,
      "hovered": (
        background-color: colors.$dark-red,
        outline-color: colors.$dark-red,
        outline: $button-outline-width solid colors.$dark-red,
      ),
      "focused": (
        background-color: colors.$dark-red,
        outline-color: colors.$dark-red,
        outline: $button-outline-width solid colors.$dark-red,
      ),
      // We may want to treat disabled states for different variant colors differently in the
      // future, but for now they are mostly the same.
      "disabled":
        (
          color: colors.$standard-disabled-color,
          outline-color: colors.$standard-disabled-border-olor,
          outline: $button-outline-width solid colors.$standard-disabled-border-color,
          background-color: colors.$standard-disabled-bg-color,
        ),
    ),
    "white": (
      color: colors.$text-secondary,
      background-color: colors.$white,
      outline-color: colors.$light-grey,
      "hovered": (
        outline-color: colors.$grey,
        outline: $button-outline-width solid colors.$grey,
      ),
      "focused": (
        outline-color: colors.$grey,
        outline: $button-outline-width solid colors.$grey,
      ),
      // We may want to treat disabled states for different variant colors differently in the
      // future, but for now they are mostly the same.
      "disabled":
        (
          color: colors.$standard-disabled-color,
          outline-color: colors.$standard-disabled-border-olor,
          outline: $button-outline-width solid colors.$standard-disabled-border-color,
        ),
    ),
  ),
  "action": (
    "primary": (
      color: colors.$white,
      background-color: colors.$green,
      outline-color: colors.$green,
      "hovered": (
        background-color: colors.$dark-green,
        outline-color: colors.$dark-green,
        outline: $button-outline-width solid colors.$dark-green,
      ),
      "focused": (
        background-color: colors.$dark-green,
        outline-color: colors.$dark-green,
        outline: $button-outline-width solid colors.$dark-green,
      ),
      // We may want to treat disabled states for different variant colors differently in the
      // future, but for now they are mostly the same.
      "disabled":
        (
          color: colors.$standard-disabled-color,
          outline-color: colors.$standard-disabled-border-olor,
          outline: $button-outline-width solid colors.$standard-disabled-border-color,
          background-color: colors.$standard-disabled-bg-color,
        ),
    ),
    "secondary": (
      color: colors.$text-primary,
      background-color: colors.$light-grey,
      outline-color: colors.$light-grey,
      "hovered": (
        background-color: colors.$darker-light-grey,
        outline-color: colors.$darker-light-grey,
        outline: $button-outline-width solid colors.$darker-light-grey,
      ),
      "focused": (
        background-color: colors.$darker-light-grey,
        outline-color: colors.$darker-light-grey,
        outline: $button-outline-width solid colors.$darker-light-grey,
      ),
      // We may want to treat disabled states for different variant colors differently in the
      // future, but for now they are mostly the same.
      "disabled":
        (
          color: colors.$standard-disabled-color,
          outline-color: colors.$standard-disabled-border-olor,
          outline: $button-outline-width solid colors.$standard-disabled-border-color,
          background-color: colors.$standard-disabled-bg-color,
        ),
    ),
    // These colors will be the default, but the bare action button will have a color override based
    // on the icon colors.
    "bare":
      (
        color: colors.$link-blue,
        background-color: colors.$transparent,
        outline-color: colors.$transparent,
        "hovered": (
          color: colors.$dark-blue,
        ),
        "focused": (
          color: colors.$dark-blue,
        ),
        // We may want to treat disabled states for different variant colors differently in the
        // future, but for now they are mostly the same.
        "disabled":
          (
            color: colors.$standard-disabled-color,
          ),
      ),
    "danger": (
      color: colors.$white,
      background-color: colors.$red,
      outline-color: colors.$red,
      "hovered": (
        background-color: colors.$dark-red,
        outline-color: colors.$dark-red,
        outline: $button-outline-width solid colors.$dark-red,
      ),
      "focused": (
        background-color: colors.$dark-red,
        outline-color: colors.$dark-red,
        outline: $button-outline-width solid colors.$dark-red,
      ),
      // We may want to treat disabled states for different variant colors differently in the
      // future, but for now they are mostly the same.
      "disabled":
        (
          color: colors.$standard-disabled-color,
          outline-color: colors.$standard-disabled-border-olor,
          outline: $button-outline-width solid colors.$standard-disabled-border-color,
          background-color: colors.$standard-disabled-bg-color,
        ),
    ),
  ),
  "alternate": (
    "link": (
      color: colors.$link-blue,
      background-color: colors.$transparent,
      outline-color: colors.$transparent,
      "hovered": (
        color: colors.$dark-blue,
      ),
      "focused": (
        color: colors.$dark-blue,
      ),
      // We may want to treat disabled states for different variant colors differently in the
      // future, but for now they are mostly the same.
      "disabled":
        (
          color: colors.$standard-disabled-color,
        ),
    ),
    "danger": (
      color: colors.$red,
      background-color: colors.$transparent,
      outline-color: colors.$transparent,
      "hovered": (
        color: colors.$dark-red,
      ),
      "focused": (
        color: colors.$dark-red,
      ),
      // We may want to treat disabled states for different variant colors differently in the
      // future, but for now they are mostly the same.
      "disabled":
        (
          color: colors.$standard-disabled-color,
        ),
    ),
  ),
);

@mixin button-colors($args...) {
  $arguments: meta.keywords($args);

  @if map.has-key($arguments, "variant") {
    @if not map.has-key($arguments, "sub-variant") {
      @return throw.error(
        "If the variant argument is provided, the 'sub-variant' must also be provided.",
        $source: "button-colors()",
        $variant: fn.map-get($arguments, "variant")
      );
    }
    $variant: fn.validate-value(fn.map-get($arguments, "variant"), $button-primary-variants);
    $sub-variant: fn.validate-value(
      fn.map-get($arguments, "sub-variant"),
      fn.map-get($button-variant-map, $variant)
    );
    $colors: fn.map-get($button-variant-colors, $variant, $sub-variant);
    @include button-colors($colors...);
  } @else {
    $background-color: fn.get-optional-kwarg(
      "background-color",
      $default: colors.$transparent,
      $args...
    );
    $outline-color: fn.get-optional-kwarg("outline-color", $default: $background-color, $args...);
    $outline: fn.get-optional-kwarg(
      "outline",
      $default: $button-outline-width solid $outline-color,
      $args...
    );

    $attibutes: (
      background-color: $background-color,
      outline-color: $outline-color,
      outline: $outline,
      color: fn.get-optional-kwarg("color", $default: null, $args...),
    );

    @each $attr in map.keys($attributes) {
      // Do not set null keys.
      @if fn.map-get($attributes, $attr) {
        #{$attr}: fn.map-get($attributes, $attr);
      }
    }
    // If a 'hovered' argument is provided, include this mixin recursively to define the colors of
    // the button when it is hovered.
    @if map.has-key($arguments, "hovered") {
      $hovered: fn.map-get($arguments, "hovered");
      @if map.has-key($hovered, "hovered") or
        map.has-key($hovered, "focused") or
        map.has-key($hovered, "disabled")
      {
        @return throw.error(
          "Detected nested state key(s) in hovered state attribute.  This will cause an infinite recursion.",
          $source: "button-colors()"
        );
      }
      @include button-hovered {
        // Use the original, non-hovered and non-focused attributes as defaults such that only the
        // hovered attributes that are provided are overridden when the button is hovered.
        $hovered: map.merge($attributes, $hovered);
        @include button-colors($hovered...);
      }
    }
    // If a 'focused' argument is provided, include this mixin recursively to define the colors of
    // the button when it is focused.
    @if map.has-key($arguments, "focused") {
      $focused: fn.map-get($arguments, "focused");
      @if map.has-key($hovered, "hovered") or
        map.has-key($hovered, "focused") or
        map.has-key($hovered, "disabled")
      {
        @return throw.error(
          "Detected nested state key(s) in focused state attribute.  This will cause an infinite recursion.",
          $source: "button-colors()"
        );
      }
      @include button-focused {
        // Use the original, non-hovered and non-focused attributes as defaults such that only the
        // focused attributes that are provided are overridden when the button is focused.
        $focused: map.merge($attributes, $focused);
        @include button-colors($focused...);
      }
    }
    // If a 'focused' argument is provided, include this mixin recursively to define the colors of
    // the button when it is focused.
    @if map.has-key($arguments, "disabled") {
      $disabled: fn.map-get($arguments, "disabled");
      @if map.has-key($hovered, "hovered") or
        map.has-key($hovered, "focused") or
        map.has-key($hovered, "disabled")
      {
        @return throw.error(
          "Detected nested state key(s) in disabled state attribute.  This will cause an infinite recursion.",
          $source: "button-colors()"
        );
      }
      @include mixins.disabled {
        // Use the original, non-hovered and non-focused attributes as defaults such that only the
        // focused attributes that are provided are overridden when the button is focused.
        $disabled: map.merge($attributes, $disabled);
        @include button-colors($disabled...);
      }
    }
  }
}

@mixin button-solid-size($size) {
  $size: fn.validate-value($size, map.keys($button-solid-sizes));

  $padding: fn.map-get($button-solid-padding, $size);
  $height: fn.map-get($button-solid-sizes, $size);

  $vertical-padding: list.nth($padding, 1);
  $line-height: $height - 2 * $vertical-padding;

  font-size: fn.map-get($button-solid-font-sizes, $size);

  /*
  Usually, the height of the button would just be determined by the combination of the vertical
  padding and line-height (i.e. height = 2 * vertical-padding + line-height).  However, we need to
  constrain the height (and not allow it to be "auto") such that the SVG icons or spinners can
  properly fill up the available height and size responsively.  If we did not define the height
  explicitly, this would not work.

  So instead of calculating the height based on the padding and line-height, we calculate the
  line-height based on the padding and height - and all 3 consistent with each other while still
  allowing the height to be constrained.
  */
  height: $height;
  line-height: $line-height;
  padding: $padding;
}
