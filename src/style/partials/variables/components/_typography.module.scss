@use "sass:map";
@use "sass:meta";
@use "sass:list";

@use "throw";

@use "../../functions" as fn;
@use "../colors.module" as colors;

/* ------------------------------------ Font Face Specifications -------------------------------- */
$font-file-types: (svg, eot, ttf, woff, woff2);
$font-family-folder-names: (
  "avenir": "AvenirNext",
  "roboto": "Roboto",
);
$font-family-style-folder-names: (
  "avenir": (
    "Bold",
    "Light",
    "Medium",
    "Regular",
    "SemiBold",
  ),
  "roboto": (
    "Bold",
    "Light",
    "Medium",
    "Regular",
  ),
);
$font-family-font-styles: (normal, italic);
$font-family-extensions: ("eot", "eot?#iefix", "svg", "ttf", "woff", "woff2");
$font-family-formats: (
  "eot": null,
  "eot?#iefix": "embedded-opentype",
  "ttf": "truetype",
  "woff2": "woff2",
  "woff": "woff",
  "svg": "svg",
);

/* ------------------------------------- Typography Types --------------------------------------- */
$typography-types: ("body", "heading", "label");
$typography-levels: (
  "body": (
    1,
    2,
    3,
    4,
    5,
    6,
  ),
  "heading": (
    1,
    2,
    3,
    4,
  ),
  "label": (
    1,
    2,
    3,
  ),
);

$heading-default-level: 1;
$body-default-level: 3;
$label-default-level: 1;

$typography-default-levels: (
  "body": $body-default-level,
  "heading": $heading-default-level,
  "label": $label-default-level,
);

@function parse-level($type, $args...) {
  $type: fn.validate-value($type, $typography-types);
  $default-level: fn.map-get($typography-default-levels, $type);
  $level: fn.get-optional-kwarg("level", $default: $default-level, $args...);
  $level: fn.validate-value($level, fn.map-get($typography-levels, $type));
  @return $level;
}

/* -------------------------------------- Font Families ----------------------------------------- */
$font-family-avenir: avenir;
$font-family-roboto: roboto;
$font-families: ($font-family-avenir, $font-family-roboto);

$heading-font-family: $font-family-avenir;
$body-font-family: $font-family-avenir;
$label-font-family: $font-family-avenir;

$typography-font-families: (
  "heading": $heading-font-family,
  "body": $body-font-family,
  "label": $label-font-family,
);

@function get-font-family($type) {
  $type: fn.validate-value($type, $typography-types);
  @return fn.map-get($typography-font-families, $type);
}

@mixin font-family($type) {
  font-family: get-font-family($type);
}

@mixin body-font-family() {
  @include font-family("body");
}

@mixin heading-font-family() {
  @include font-family("heading");
}

@mixin label-font-family() {
  @include font-family("label");
}

/* --------------------------------------- Font Sizes ------------------------------------------- */
$xlarge-body-font-size: 16px;
$large-body-font-size: 14px;
$standard-body-font-size: 13px;
$medium-body-font-size: 12px;
$small-body-font-size: 11px;
$xsmall-body-font-size: 10px;

$body-font-size-scale: (
  "xlarge": $xlarge-body-font-size,
  "large": $large-body-font-size,
  "standard": $standard-body-font-size,
  "medium": $medium-body-font-size,
  "small": $small-body-font-size,
  "xsmall": $xsmall-body-font-size,
);

$body-font-sizes: (
  1: fn.map-get($body-font-size-scale, "xlarge"),
  2: fn.map-get($body-font-size-scale, "large"),
  3: fn.map-get($body-font-size-scale, "standard"),
  4: fn.map-get($body-font-size-scale, "medium"),
  5: fn.map-get($body-font-size-scale, "small"),
  6: fn.map-get($body-font-size-scale, "xsmall"),
);

$body-line-heights: (
  1: 20px,
  2: 18px,
  3: 16px,
  4: 14px,
  5: 13px,
  6: 12px,
);

$large-label-font-size: 16px;
$medium-label-font-size: 14px;
$small-label-font-size: 12px;

$label-font-size-scale: (
  "large": $large-label-font-size,
  "medium": $medium-label-font-size,
  "small": $small-label-font-size,
);

$label-font-sizes: (
  1: fn.map-get($label-font-size-scale, "large"),
  2: fn.map-get($label-font-size-scale, "medium"),
  3: fn.map-get($label-font-size-scale, "small"),
);

$label-line-heights: (
  1: 16px,
  2: 14px,
  3: 12px,
);

$large-heading-font-size: 32px;
$medium-heading-font-size: 24px;
$small-heading-font-size: 20px;
$xsmall-heading-font-size: 18px;

$heading-font-size-scale: (
  "large": $large-heading-font-size,
  "medium": $medium-heading-font-size,
  "small": $small-heading-font-size,
  "xsmall": $xsmall-heading-font-size,
);

$heading-font-sizes: (
  1: fn.map-get($heading-font-size-scale, "large"),
  2: fn.map-get($heading-font-size-scale, "large"),
  3: fn.map-get($heading-font-size-scale, "medium"),
  4: fn.map-get($heading-font-size-scale, "xsmall"),
);

$heading-line-heights: (
  1: 36px,
  2: 28px,
  3: 24px,
  4: 24px,
);

$typography-font-sizes: (
  "body": $body-font-sizes,
  "heading": $heading-font-sizes,
  "label": $label-font-sizes,
);

$typography-line-heights: (
  "body": $body-line-heights,
  "heading": $heading-line-heights,
  "label": $label-line-heights,
);

@function get-font-size($type, $args...) {
  $type: fn.validate-value($type, $typography-types);
  @return fn.map-get($typography-font-sizes, $type, parse-level($type, $args...));
}

@function get-line-height($type, $args...) {
  $type: fn.validate-value($type, $typography-types);
  @return fn.map-get($typography-line-heights, $type, parse-level($type, $args...));
}

@mixin font-size($type, $level: null) {
  font-size: get-font-size($type, $level);
}

@mixin heading-font-size($level: null) {
  @include font-size("heading", $level);
}

@mixin body-font-size($level: null) {
  @include font-size("body", $level);
}

@mixin label-font-size($level: null) {
  @include font-size("label", $level);
}

@mixin line-height($type, $level: null) {
  line-height: get-line-height($type, $level);
}

@mixin heading-line-height($level: null) {
  @include line-height("heading", $level);
}

@mixin body-line-height($level: null) {
  @include line-height("body", $level);
}

@mixin label-line-height($level: null) {
  @include line-height("label", $level);
}

/* --------------------------------------- Font Colors ------------------------------------------ */
$label-color: colors.$text-secondary;
$heading-color: colors.$text-primary;
$body-color: colors.$text-secondary;

$typography-colors: (
  "heading": $heading-color,
  "body": $body-color,
  "label": $label-color,
);

@function get-font-color($type) {
  $type: fn.validate-value($type, $typography-types);
  @return fn.map-get($typography-colors, $type);
}

@mixin font-color($type) {
  color: get-font-color($type);
}

@mixin body-font-color() {
  @include font-color("body");
}

@mixin heading-font-color() {
  @include font-color("heading");
}

@mixin label-font-color() {
  @include font-color("label");
}

/* --------------------------------------- Font Weights ----------------------------------------- */
$font-weight-names: ("bold", "medium", "regular", "light", "heavy");
$font-family-weights: (
  avenir: (
    // Maps to Light Font File
    "light": 300,
    // Maps to Regular Font File
    "regular": 400,
    // Maps to Medium Font File
    "medium": 500,
    // Maps to SemiBold Font File
    "bold": 600,
    // Maps to Bold Font File
    "heavy": 700,
  ),
  roboto: (
    // Maps to Light Font File
    "light": 300,
    // Maps to Regular Font File
    "regular": 400,
    // Maps to Medium Font File
    "medium": 500,
    // Maps to Bold Font File
    "bold": 600,
    // Maps to Bold Font File
    "heavy": 700,
  ),
);

@function get-font-family-weight($family, $weight-name) {
  $family: fn.validate-value($family, $font-families);
  $weight-name: fn.validate-value($weight-name, $font-weight-names);
  @return fn.map-get($font-family-weights, $family, $weight-name);
}

// Supported font styles for each font weight name and font family.
$font-family-styles: (
  avenir: (
    "light": (
      normal,
    ),
    "regular": (
      normal,
      italic,
    ),
    "medium": (
      normal,
    ),
    "bold": (
      normal,
      italic,
    ),
    "heavy": (
      normal,
      italic,
    ),
  ),
  roboto: (
    "light": (
      normal,
      italic,
    ),
    "regular": (
      normal,
    ),
    "medium": (
      normal,
      italic,
    ),
    "bold": (
      normal,
    ),
    "heavy": (
      normal,
      italic,
    ),
  ),
);

@function font-family-style-is-supported($family, $font-style, $throw: true) {
  $family: fn.validate-value($family, $font-families);
  $font-style: fn.validate-value($font-style, (normal, italic));
  @if fn.in-list($font-style, fn.map-get($font-family-styles, $family)) {
    @return true;
  } @else if $throw {
    @return throw.error(
      "The font-style #{$font-style} is not supported for font-family #{$family}.",
      $source: "font-family-style-is-supported()",
      $family: $family,
      $font-style: $font-style,
      $supported: fn.map-get($font-family-styles, $family)
    );
  }
  @return false;
}

$heading-font-weight-names: (
  1: "heavy",
  2: "bold",
  3: "bold",
  4: "medium",
);

$body-font-weight-names: (
  1: "regular",
  2: "regular",
  3: "regular",
  4: "regular",
  5: "regular",
  6: "regular",
);

$label-font-weight-names: (
  1: "regular",
  2: "regular",
  3: "regular",
);

$typography-weight-names: (
  "label": $label-font-weight-names,
  "body": $body-font-weight-names,
  "heading": $heading-font-weight-names,
);

@function parse-weight-name($type, $args...) {
  $type: fn.validate-value($type, $typography-types);
  $default-weight-name: get-font-weight-name($type, $args...);
  $weight-name: fn.get-optional-kwarg("font-weight-name", $default: $default-weight-name, $args...);
  $weight-name: fn.validate-value($weight-name, $font-weight-names);
  @return $weight-name;
}

@function get-font-weight-name($type, $args...) {
  $type: fn.validate-value($type, $typography-types);
  $level: parse-level($type, $args...);
  @return fn.map-get($typography-weight-names, $type, $level);
}

@function get-font-weight($type, $args...) {
  $weight-name: parse-weight-name($type, $args...);
  $family: get-font-family($type);
  @return fn.map-get($font-family-weights, $family, $weight-name);
}

@mixin font-weight($type, $args...) {
  font-weight: get-font-weight($type, $args...);
}

@mixin body-font-weight($args...) {
  font-weight: get-font-weight("body", $args...);
}

@mixin heading-font-weight($args...) {
  font-weight: get-font-weight("heading", $args...);
}

@mixin label-font-weight($args...) {
  font-weight: get-font-weight("label", $args...);
}

@function get-font($type, $args...) {
  $properties: (
    font-family: get-font-family($type),
    font-weight: get-font-weight($type, $args...),
    color: fn.get-optional-kwarg(color, $default: get-font-color($type), $args...),
    line-height: get-line-height($type, $args...),
    font-size: get-font-size($type, $args...),
  );
  $overrides: map.get(meta.keywords($args), "override");
  @if $overrides {
    $properties: map.merge($properties, $overrides);
  }
  @return fn.pick-or-ignore($properties, $args...);
}

@mixin font($type, $args...) {
  $properties: get-font($type, $args...);
  // All of the relevant properties might not be present if some were ignored.
  @each $k in map.keys($properties) {
    @if map.get($properties, $k) {
      #{$k}: fn.map-get($properties, $k);
    }
  }
}

@mixin label($args...) {
  @include font("label", $args...);
}

@mixin heading($args...) {
  @include font("heading", $args...);
}

@mixin body($args...) {
  @include font("body", $args...);
}

@function font-file-path($family, $style, $extension, $font-style: normal) {
  $family: fn.validate-value($family, $font-families);
  $font-style: fn.validate-value($font-style, $font-family-font-styles);
  $style-folder-name: fn.validate-value(
    $style,
    fn.map-get($font-family-style-folder-names, $family)
  );
  $family-folder-name: fn.map-get($font-family-folder-names, $family);
  $extension: fn.validate-value($extension, $font-family-extensions);
  @if $font-style == italic {
    @return "/fonts/#{$family-folder-name}/#{$style-folder-name}/Italic/#{$family-folder-name}-#{$style-folder-name}Italic.#{$extension}";
  }
  @return "/fonts/#{$family-folder-name}/#{$style-folder-name}/#{$family-folder-name}-#{$style-folder-name}.#{$extension}";
}

@function font-url($family, $style, $extension, $font-style: normal) {
  $family: fn.validate-value($family, $font-families);
  $font-style: fn.validate-value($font-style, $font-family-font-styles);
  $style: fn.validate-value($style, fn.map-get($font-family-style-folder-names, $family));
  $extension: fn.validate-value($extension, $font-family-extensions);
  $format: fn.map-get($font-family-formats, $extension);
  @if $format {
    @return url("#{font-file-path($family, $style, $extension, $font-style)}") format($format);
  }
  @return url("#{font-file-path($family, $style, $extension, $font-style)}");
}

@function font-src($family, $style, $font-style: normal) {
  $src: null;
  $font-style: fn.validate-value($font-style, $font-family-font-styles);
  $family: fn.validate-value($family, $font-families);
  $style: fn.validate-value($style, fn.map-get($font-family-style-folder-names, $family));
  @each $ext in $font-family-extensions {
    $src: list.append($src, font-url($family, $style, $ext, $font-style), comma);
  }
  @return $src;
}

@mixin font-face($family, $style, $weight, $font-style: normal) {
  $font-style: fn.validate-value($font-style, $font-family-font-styles);
  @font-face {
    font-display: swap;
    font-family: $family;
    font-style: $font-style;
    font-weight: $weight;
    src: font-src($family, $style, $font-style);
  }
}

@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

$entity-text-font-size: $medium-body-font-size;
$entity-text-identifier-color: colors.$text-light;
$entity-text-description-color: colors.$text-secondary;
