@use "sass:list";
@use "sass:map";
@use "sass:meta";

@use "throw";
@use "./core" as fn;

@function first($list) {
  @return list.nth($list, 1);
}

@function last($list) {
  @return list.nth($list, list.length($list));
}

@function is-separator($value) {
  $separators: ("space", "comma", "slash", "auto");
  @return fn.in-list($value, $separators);
}

@function arglist-to-list($data...) {
  $list: ();
  @each $d in $data {
    $list: list.append($list, $d, comma);
  }
  @return $list;
}

/// Parses an optionally provided keyword argument from an arbitrary set of arguments,
///
/// @param {string} $name
///   The name of the optionally provided keyword argument that may or may not be in the arbitrary
///   set of arguments.
/// @param {arglist} $args...
///   The arbitrary set of arguments provided to a function or mixin that may or may not include
///   the optional argument defined by `name`.
/// @param {} $default
///   A default value that should be used in the case that the argument is not present in the
///   set of provided arbitrary arguments.
@function get-optional-kwarg($name, $args...) {
  $default: if(
    map.has-key(meta.keywords($args), "default"),
    map.get(meta.keywords($args), "default"),
    null
  );
  $value: if(
    map.has-key(meta.keywords($args), $name),
    map.get(meta.keywords($args), $name),
    $default
  );
  @return $value;
}

/// Returns a new list with the provided elements removed.
///
/// @param {list} $list
///   A list for which the provided elements should be removed.
/// @param {arglist} $values...
///   The values that should be removed from the list.
/// @param {bool} $strict
///   Whether or not a value that does not exist in the list should cause an error to be thrown.
///   Default: true
@function list-remove($list, $values...) {
  $strict: get-optional-kwarg("strict", $values..., $default: true);

  // Validate the values being provided.
  @each $v in $values {
    @if meta.type-of($v) == list {
      @return throw.error(
        "The provided value '#{$v}' is a list.  Did you mean to provide as a rest arg?",
        $source: "list-remove()",
        $value: $v
      );
    } @else if $strict and not fn.in-list($v, $list) {
      @return throw.error(
        "The provided value '#{$v}' is not in the provided list, '#{$list}'.",
        $source: "list-remove()",
        $value: $v,
        $list: $list
      );
    }
  }
  $new-list: ();
  @each $l in $list {
    @if not fn.in-list($l, $values) {
      $new-list: list.append($new-list, $l, list.separator($list));
    }
  }
  @return $new-list;
}

/// An extension of native SASS's `list.join()` method that provides the following implementations:
///
/// 1. Removes null values.
/// 2. Allows multiple lists to be joined simultaneously.
/// 3. Joins both lists and singleton values.
///
/// @param {arglist} $lists
///   The lists and constants that should be joined together in a combined list.
@function list-join($lists...) {
  // If the last argument of the set of arguments provided to the function is a valid separator,
  // it will be recognized as such and used for the returned list.
  $separator: "comma";

  $lists: list-remove(arglist-to-list($lists...), null, $strict: false);
  $last-index: list.length($lists);

  @if last($lists) and is-separator(last($lists)) {
    $separator: last($lists);
    $last-index: $last-index - 1;
    @if list.length($lists) == 1 {
      @return throw.error(
        "The provided arguments only contain the separator, #{$separator}.",
        $source: "list-join()",
        $separator: $separator
      );
    }
  } @else if list.length($lists) == 0 {
    @return throw.error("At least one argument is required.", $source: "list-join()");
  }

  $result: ();
  @for $i from 1 through $last-index {
    $value: list.nth($lists, $i);
    @if meta.type-of($value) != list {
      $result: list.append($result, $value, $separator);
    } @else {
      @each $l in list-remove($value, null, $strict: false) {
        $result: list.append($result, $l, $separator);
      }
    }
  }
  @return $result;
}
