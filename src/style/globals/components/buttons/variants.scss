@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";

@use "partials";

$button-locked-class: ".button--locked";
$button-loading-class: ".button--loading";

@mixin hovered {
  @include partials.hovered {
    @include partials.without-selectors(($button-loading-class, $button-locked-class)) {
      @content;
    }
  }
}

@mixin focused {
  @include partials.focused {
    @include partials.without-selectors(($button-loading-class, $button-locked-class)) {
      @content;
    }
  }
}

@mixin focused-hovered {
  @include partials.focused-hovered {
    @include partials.without-selectors(($button-loading-class, $button-locked-class)) {
      @content;
    }
  }
}

@mixin button-state-properties($tiers...) {
  @include partials.mapped-properties(partials.$button-state-properties, $tiers...);
}

// Primary, Secondary, Bare & Alternate
@mixin content-variant {
  > .button__content {
    > .button__content--string {
      font-size: inherit;
      line-height: inherit;
    }
  }
}

@mixin solid-variant {
  @include content-variant;

  font-weight: partials.$button-font-weight;
  outline: partials.$button-outline-width solid transparent;
  outline-offset: -1 * partials.$button-outline-width;

  /*
  Do not default the size of the button or anchor - this will prevent SASS from overriding the size
  of the button in classes or elements that use the button.  Only size the button and/or anchor if
  the class exists on the element (which happens when the `size` prop is provided).
  */
  @each $size in map.keys(partials.$button-solid-sizes) {
    &.button--#{$size} {
      $padding: partials.map-get(partials.$button-solid-padding, $size);
      $height: partials.map-get(partials.$button-solid-sizes, $size);

      $vertical-padding: list.nth($padding, 1);
      $line-height: $height - 2 * $vertical-padding;

      font-size: partials.map-get(partials.$button-solid-font-sizes, $size);

      /*
      Usually, the height of the button would just be determined by the combination of the vertical
      padding and line-height (i.e. height = 2 * vertical-padding + line-height).  However, we need
      to constrain the height (and not allow it to be "auto") such that the SVG icons or spinners
      can properly fill up the available height and size responsively.  If we did not define the
      height explicitly, this would not work.

      So instead of calculating the height based on the padding and line-height, we calculate the
      line-height based on the padding and height - and all 3 consistent with each other while still
      allowing the height to be constrained.
      */
      height: $height;
      line-height: $line-height;
      padding: $padding;
    }
  }
}

@mixin danger-variant {
  @include solid-variant;

  background-color: partials.map-get(partials.$button-bg-colors, "danger");
  color: partials.map-get(partials.$button-colors, "danger");
  outline: partials.$button-outline-width solid
    partials.map-get(partials.$button-border-colors, "danger");

  @include hovered {
    background-color: partials.$dark-red;
  }

  @include focused {
    background-color: partials.$dark-red;
  }

  @include partials.disabled {
    background-color: partials.$disabled-color;
    outline: partials.$button-outline-width solid partials.$disabled-color;
  }

  @include focused-hovered {
    background-color: partials.$dark-red;
  }
}

@mixin primary-variant {
  @include solid-variant;

  background-color: partials.map-get(partials.$button-bg-colors, "primary");
  color: partials.map-get(partials.$button-colors, "primary");
  outline: partials.$button-outline-width solid
    partials.map-get(partials.$button-border-colors, "primary");

  @include hovered {
    background-color: partials.$dark-green;
  }

  @include focused {
    background-color: partials.$dark-green;
  }

  @include partials.disabled {
    background-color: partials.$disabled-color;
    outline: partials.$button-outline-width solid partials.$disabled-color;
  }

  @include focused-hovered {
    background-color: partials.$dark-green;
  }
}

@mixin secondary-variant {
  @include solid-variant;

  background-color: partials.map-get(partials.$button-bg-colors, "secondary");
  color: partials.map-get(partials.$button-colors, "secondary");
  outline: partials.$button-outline-width solid
    partials.map-get(partials.$button-border-colors, "secondary");

  @include focused {
    background-color: partials.$highlight-blue;
  }

  @include hovered {
    background-color: partials.$highlight-blue;
  }

  @include partials.disabled {
    color: partials.$disabled-color;
    outline: partials.$button-outline-width solid partials.$disabled-color;
  }

  @include focused-hovered {
    background-color: partials.$highlight-blue;
    outline: partials.$button-outline-width solid partials.$brand-green;
  }
}

@mixin bare-variant {
  @include solid-variant;

  background-color: partials.map-get(partials.$button-bg-colors, "bare");
  color: partials.$link-blue;
  outline: partials.$button-outline-width solid
    partials.map-get(partials.$button-border-colors, "bare");

  @include hovered {
    color: partials.$brand-mid-blue;
  }

  @include focused {
    color: partials.$brand-mid-blue;
  }

  &.button--bare--danger {
    color: partials.$red;

    @include hovered {
      color: partials.$dark-red;
    }

    @include focused {
      color: partials.$dark-red;
    }
  }
}

@mixin alternate-variant {
  @include content-variant;

  background-color: partials.map-get(partials.$button-bg-colors, "alternate");
  color: partials.map-get(partials.$button-colors, "alternate");
  font-weight: partials.get-font-weight("body", "bold");
  outline: partials.$button-outline-width solid
    partials.map-get(partials.$button-border-colors, "alternate");
  padding: 0;

  @include hovered {
    color: partials.$brand-mid-blue;
  }

  @include focused {
    color: partials.$brand-mid-blue;
  }

  /*
  Do not default the size of the button or anchor - this will prevent SASS from overriding the size
  of the button in classes or elements that use the button.  Only size the button and/or anchor if
  the class exists on the element (which happens when the `size` prop is provided).
  */
  @each $size in map.keys(partials.$button-alternate-sizes) {
    &.button--#{$size} {
      font-size: partials.map-get(partials.$button-alternate-font-sizes, $size);
      height: partials.map-get(partials.$button-alternate-sizes, $size);
      line-height: partials.map-get(partials.$button-alternate-sizes, $size);
    }
  }

  &.button--alternate--inline {
    color: partials.$link-blue;
    font-weight: partials.get-font-weight("body", "regular");
    text-decoration: underline;

    @include hovered {
      font-weight: partials.get-font-weight("body", "bold");
      text-decoration: none;
    }

    @include focused {
      font-weight: partials.get-font-weight("body", "bold");
      text-decoration: none;
    }

    /*
    We use this hidden psuedo-element to establish the width of the text the button or anchor
    contains when it is bold, such that when the text changes to bold on hover or focus - the
    width is already consistent with what it would otherwise be when bold and the overall width
    of the button and/or anchor does not change.
    */
    .button__text::before {
      font-weight: partials.get-font-weight("body", "bold");
    }
  }
}

@mixin action-primary-variant {
  background-color: partials.map-get(partials.$button-bg-colors, "action", "primary");
  color: partials.map-get(partials.$button-colors, "action", "primary");
  outline: partials.$button-action-outline-width solid
    partials.map-get(partials.$button-border-colors, "action", "primary");
  padding: partials.$button-action-primary-padding;

  @include partials.disabled {
    color: partials.$disabled-color;
    outline: partials.$button-action-outline-width solid partials.$disabled-color;
  }

  @include focused {
    color: partials.$dark-blue;
    outline: partials.$button-action-outline-width solid partials.$dark-blue;
  }

  @include hovered {
    color: partials.$dark-blue;
    outline: partials.$button-action-outline-width solid partials.$dark-blue;
  }

  /*
  Do not default the size of the button or anchor - this will prevent SASS from overriding the
  size of the button in classes or elements that use the button.  Only size the button and/or
  anchor if the class exists on the element (which happens when the `size` prop is provided).
  */
  @each $size in map.keys(partials.$button-action-primary-sizes) {
    &.button--#{$size} {
      height: partials.map-get(partials.$button-action-primary-sizes, $size);
      width: partials.map-get(partials.$button-action-primary-sizes, $size);
    }
  }
}

@mixin action-bare-variant {
  background-color: partials.map-get(partials.$button-bg-colors, "action", "bare");
  outline: partials.$button-action-outline-width solid
    partials.map-get(partials.$button-border-colors, "action", "bare");
  padding: partials.$button-action-bare-padding;

  @include partials.with-icon-colors using ($value, $data) {
    $name: partials.map-get($data, "name");
    &.button--action--bare--color-#{$name} {
      color: $value;

      @include focused {
        color: partials.map-get($data, "focused");
      }

      @include hovered {
        color: partials.map-get($data, "hovered");
      }

      @include partials.disabled {
        color: partials.map-get($data, "disabled");
      }
    }
  }

  /*
  Do not default the size of the button or anchor - this will prevent SASS from overriding the
  size of the button in classes or elements that use the button.  Only size the button and/or
  anchor if the class exists on the element (which happens when the `size` prop is provided).
  */
  @each $size in map.keys(partials.$button-action-bare-sizes) {
    &.button--#{$size} {
      height: partials.map-get(partials.$button-action-bare-sizes, $size);
      width: partials.map-get(partials.$button-action-bare-sizes, $size);
    }
  }

  &--sidebar {
    @include partials.size(partials.$sidebar-anchor-size);
    @include partials.flex-c;

    background-color: transparent;
    border-radius: partials.$sidebar-anchor-border-radius;
    color: partials.$sidebar-anchor-color;
    padding: 0.5 * (partials.$sidebar-anchor-size - partials.$sidebar-anchor-icon-size);

    @include focused {
      color: partials.$sidebar-anchor-color;
    }

    @include hovered {
      color: partials.$sidebar-anchor-color;
    }

    @include partials.disabled {
      color: partials.$sidebar-anchor-color;
    }

    &--active {
      background-color: partials.$sidebar-anchor-active-bg-color;
    }

    &--emphasize {
      // For cases where we want the icon in the sidebar anchor to be slightly larger, we decrease
      // the padding.
      padding: 0.5 * (partials.$sidebar-anchor-size - partials.$sidebar-anchor-icon-emphasis-size);
    }
  }
}

@mixin action-variant-properties($variant) {
  @if string.quote($variant) == "bare" {
    @include action-bare-variant;
  } @else if string.quote($variant) == "primary" {
    @include action-primary-variant;
  } @else {
    @error "The provided variant #{meta.inspect($variant)} is not expected.";
  }
}

@mixin action-variant {
  aspect-ratio: 1;

  @include partials.without-selectors(
    partials.$button-action-variants,
    $prefix: ".button--action--"
  ) {
    @include action-variant-properties(partials.$button-action-default-variant);
  }

  @each $variant in partials.$button-action-variants {
    &.button--action--#{$variant} {
      @include action-variant-properties($variant);
    }
  }
}

@mixin button-variant($variant) {
  $variant: partials.validate-value($variant, partials.$button-variants);

  @if $variant == partials.$button-variant-primary {
    @include primary-variant;
  } @else if $variant == partials.$button-variant-secondary {
    @include secondary-variant;
  } @else if $variant == partials.$button-variant-alternate {
    @include alternate-variant;
  } @else if $variant == partials.$button-variant-bare {
    @include bare-variant;
  } @else {
    @include action-variant;
  }
}
