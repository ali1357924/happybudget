@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "sass:string";

@use "partials";

@mixin solid-variant() {
  @each $variant in partials.map-get(partials.$button-variant-map, "solid") {
    @include partials.button-colors($variant: "solid", $sub-variant: $variant);
  }

  /*
  Do not default the size of the button or anchor - this will prevent SASS from overriding the size
  of the button in classes or elements that use the button.  Only size the button and/or anchor if
  the class exists on the element (which happens when the `size` prop is provided).
  */
  @each $size in map.keys(partials.$button-solid-sizes) {
    &.button--#{$size} {
      @include partials.button-solid-size($size);
    }
  }
}

@mixin alternate-variant {
  font-weight: partials.get-font-weight("body", $weight-name: "bold");
  padding: 0;

  /*
  Do not default the size of the button or anchor - this will prevent SASS from overriding the size
  of the button in classes or elements that use the button.  Only size the button and/or anchor if
  the class exists on the element (which happens when the `size` prop is provided).
  */
  @each $size in map.keys(partials.$button-alternate-sizes) {
    &.button--#{$size} {
      font-size: partials.map-get(partials.$button-alternate-font-sizes, $size);
      height: partials.map-get(partials.$button-alternate-sizes, $size);
      line-height: partials.map-get(partials.$button-alternate-sizes, $size);
    }
  }

  @each $variant in partials.map-get(partials.$button-variant-map, "alternate") {
    @include partials.button-colors($variant: "alternate", $sub-variant: $variant);
  }

  &.button--alternate--link {
    font-weight: partials.get-font-weight("body", $weight-name: "regular");
    text-decoration: underline;

    /*
    We use this hidden psuedo-element to establish the width of the text the button or anchor
    contains when it is bold, such that when the text changes to bold on hover or focus - the
    width is already consistent with what it would otherwise be when bold and the overall width
    of the button and/or anchor does not change.
    */
    .button__text::before {
      font-weight: partials.get-font-weight("body", $weight-name: "bold");
    }
  }
}

@mixin action-secondary-variant {
  @include partials.button-colors($variant: "action", $sub-variant: "secondary");

  padding: partials.$button-action-secondary-padding;

  /*
  Do not default the size of the button or anchor - this will prevent SASS from overriding the
  size of the button in classes or elements that use the button.  Only size the button and/or
  anchor if the class exists on the element (which happens when the `size` prop is provided).
  */
  @each $size in map.keys(partials.$button-action-secondary-sizes) {
    &.button--#{$size} {
      height: partials.map-get(partials.$button-action-secondary-sizes, $size);
      width: partials.map-get(partials.$button-action-secondary-sizes, $size);
    }
  }
}

@mixin action-primary-variant {
  @include partials.button-colors($variant: "action", $sub-variant: "primary");

  padding: partials.$button-action-primary-padding;

  /*
  Do not default the size of the button or anchor - this will prevent SASS from overriding the
  size of the button in classes or elements that use the button.  Only size the button and/or
  anchor if the class exists on the element (which happens when the `size` prop is provided).
  */
  @each $size in map.keys(partials.$button-action-primary-sizes) {
    &.button--#{$size} {
      height: partials.map-get(partials.$button-action-primary-sizes, $size);
      width: partials.map-get(partials.$button-action-primary-sizes, $size);
    }
  }
}

@mixin action-bare-variant {
  @include partials.button-colors($variant: "action", $sub-variant: "bare");

  padding: partials.$button-action-bare-padding;

  @include partials.with-icon-colors using ($value, $data) {
    $name: partials.map-get($data, "name");
    &.button--action--bare--color-#{$name} {
      color: $value;

      @include partials.button-focused {
        color: partials.map-get($data, "focused");
      }

      @include partials.button-hovered {
        color: partials.map-get($data, "hovered");
      }

      @include partials.disabled {
        color: partials.map-get($data, "disabled");
      }
    }
  }

  /*
  Do not default the size of the button or anchor - this will prevent SASS from overriding the
  size of the button in classes or elements that use the button.  Only size the button and/or
  anchor if the class exists on the element (which happens when the `size` prop is provided).
  */
  @each $size in map.keys(partials.$button-action-bare-sizes) {
    &.button--#{$size} {
      height: partials.map-get(partials.$button-action-bare-sizes, $size);
      width: partials.map-get(partials.$button-action-bare-sizes, $size);
    }
  }
}

@mixin action-variant-properties($variant) {
  @if string.quote($variant) == "bare" {
    @include action-bare-variant;
  } @else if string.quote($variant) == "primary" {
    @include action-primary-variant;
  } @else if string.quote($variant) == "secondary" {
    @include action-secondary-variant;
  } @else {
    @error "The provided variant #{meta.inspect($variant)} is not a supported action variant.";
  }
}

@mixin action-variant {
  $action-variants: partials.map-get(partials.$button-variant-map, "action");
  $default-sub-variant: partials.map-get(partials.$button-default-sub-variants, "action");

  aspect-ratio: 1;

  @include partials.without-selectors($action-variants, $prefix: ".button--action--") {
    @include action-variant-properties($default-sub-variant);
  }

  @each $variant in $action-variants {
    &.button--action--#{$variant} {
      @include action-variant-properties($variant);
    }
  }
}

@mixin button-variant($variant) {
  $variant: partials.validate-value($variant, partials.$button-primary-variants);
  @if string.quote($variant) == "solid" {
    @include solid-variant;
  } @else if string.quote($variant) == "alternate" {
    @include alternate-variant;
  } @else if string.quote($variant) == "action" {
    @include action-variant;
  } @else {
    @error "The provided variant #{meta.inspect($variant)} is not a supported primary variant.";
  }
}
